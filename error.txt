NodeLoopEquivalence_test.cpp: In function ‘int main()’:
NodeLoopEquivalence_test.cpp:9:111: warning: ISO C++ forbids taking address of function ‘::main’ [-Wpedantic]
   NLE_internal::NodeLoopEquivalence<NodeLoopEquivalenceTraits<Function>> nle(*reinterpret_cast<Function*>(main));
                                                                                                               ^
In file included from NodeLoopEquivalence_test.cpp:1:0:
NodeLoopEquivalence.hpp: In instantiation of ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkerHandleAdjacents(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&)::<lambda(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, bool)> [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT = long unsigned int]’:
NodeLoopEquivalence.hpp:221:59:   required from ‘struct llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkerHandleAdjacents(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT = long unsigned int]::<lambda(using TimeStepT = using TimeStepT = size_t, bool)>’
NodeLoopEquivalence.hpp:219:10:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkerHandleAdjacents(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT = long unsigned int]’
NodeLoopEquivalence.hpp:265:33:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkers() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:282:17:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:221:9: error: no matching function for call to ‘llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::mergeChild(__gnu_cxx::__alloc_traits<std::allocator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator> > >::value_type&, llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::TimeStepT&, llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::TimeStepT&)’
         Node.mergeChild(DFSQueue[AdjNumber - 1], HighPt2, HighPt_tmp);
         ^~~~
NodeLoopEquivalence.hpp:35:8: note: candidate: void llvm::NLE_internal::DFSNode<NLET, AllocatorT>::mergeChild(llvm::NLE_internal::DFSNode<NLET, AllocatorT>&, llvm::NLE_internal::DFSNode<NLET, AllocatorT>::TimeStepT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::DFSNode<NLET, AllocatorT>::TimeStepT = long unsigned int]
   void mergeChild(DFSNode & Child, TimeStepT & HighPt2) {
        ^~~~~~~~~~
NodeLoopEquivalence.hpp:35:8: note:   candidate expects 2 arguments, 3 provided
NodeLoopEquivalence.hpp: In instantiation of ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkerHandleAdjacents(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT = long unsigned int]’:
NodeLoopEquivalence.hpp:265:33:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkers() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:282:17:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:228:18: error: ‘visitAdjacent’ was not declared in this scope
     visitAdjacent(DFSNumbers[child_node.getPal()], true);
     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NodeLoopEquivalence.hpp:228:18: note: suggested alternative: ‘VisitAdjacent’
     visitAdjacent(DFSNumbers[child_node.getPal()], true);
     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     VisitAdjacent
NodeLoopEquivalence.hpp:230:7: error: invalid conversion from ‘llvm::PredIterator<const llvm::BasicBlock, llvm::Value::user_iterator_impl<const llvm::User> >::reference {aka const llvm::BasicBlock*}’ to ‘llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::BlockT* {aka llvm::BasicBlock*}’ [-fpermissive]
       for (BlockT* Pred : predecessors(child_node.getBlock())) {
       ^~~
NodeLoopEquivalence.hpp:231:22: error: ‘visitAdjacent’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]
         visitAdjacent(DFSNumbers[{Pred, NK_Exit}], false);
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NodeLoopEquivalence.hpp:228:18: note: ‘visitAdjacent’ declared here, later in the translation unit
     visitAdjacent(DFSNumbers[child_node.getPal()], true);
     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NodeLoopEquivalence.hpp:234:7: error: invalid conversion from ‘llvm::TerminatorInst::SuccIterator<const llvm::TerminatorInst*, const llvm::BasicBlock>::reference {aka const llvm::BasicBlock*}’ to ‘llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::BlockT* {aka llvm::BasicBlock*}’ [-fpermissive]
       for (BlockT* Succ : successors(child_node.getBlock())) {
       ^~~
NodeLoopEquivalence.hpp:235:22: error: ‘visitAdjacent’ was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]
         visitAdjacent(DFSNumbers[{Succ, NK_Entry}], false);
         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NodeLoopEquivalence.hpp:228:18: note: ‘visitAdjacent’ declared here, later in the translation unit
     visitAdjacent(DFSNumbers[child_node.getPal()], true);
     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NodeLoopEquivalence.hpp: In instantiation of ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkerFinishVisit(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT&, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT, llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSNodeT = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::TimeStepT = long unsigned int]’:
NodeLoopEquivalence.hpp:266:29:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkers() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:282:17:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:241:27: error: ‘llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::TimeStepT llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::HighPt’ is private within this context
     if (HighPt_tmp > Node.HighPt) {
                      ~~~~~^~~~~~
NodeLoopEquivalence.hpp:30:13: note: declared private here
   TimeStepT HighPt;
             ^~~~~~
NodeLoopEquivalence.hpp:242:12: error: ‘llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::TimeStepT llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::HighPt’ is private within this context
       Node.HighPt = HighPt_tmp;
       ~~~~~^~~~~~
NodeLoopEquivalence.hpp:30:13: note: declared private here
   TimeStepT HighPt;
             ^~~~~~
NodeLoopEquivalence.hpp:250:27: error: ‘using DFSNodeT = class llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator> {aka class llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>}’ has no member named ‘getBrackets’; did you mean ‘Brackets’?
     MarkerT marker = Node.getBrackets().getMarker();
                      ~~~~~^~~~~~~~~~~
                      Brackets
NodeLoopEquivalence.hpp:251:39: error: ‘using NodeT = class llvm::NLE_internal::Node<llvm::BasicBlock> {aka class llvm::NLE_internal::Node<llvm::BasicBlock>}’ has no member named ‘getPointer’
     BMM[Node.getEdge().getChildNode().getPointer()] = marker;
NodeLoopEquivalence.hpp:253:25: error: ‘using DFSNodeT = class llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator> {aka class llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>}’ has no member named ‘getBrackets’; did you mean ‘Brackets’?
       EdgeT edge = Node.getBrackets().front();
                    ~~~~~^~~~~~~~~~~
                    Brackets
NodeLoopEquivalence.hpp:255:33: error: ‘using NodeT = class llvm::NLE_internal::Node<llvm::BasicBlock> {aka class llvm::NLE_internal::Node<llvm::BasicBlock>}’ has no member named ‘getPointer’
         BMM[edge.getChildNode().getPointer()] = marker;
NodeLoopEquivalence.hpp: In instantiation of ‘const BlockT* llvm::NLE_internal::DFSStackNode<NLET>::getBB() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; llvm::NLE_internal::DFSStackNode<NLET>::BlockT = llvm::BasicBlock]’:
NodeLoopEquivalence.hpp:75:30:   required from ‘llvm::NLE_internal::DFSStackNode<NLET>::DFSStackNode(llvm::NLE_internal::DFSStackNode<NLET>::EdgeT, llvm::NLE_internal::DFSStackNode<NLET>::TimeStepT&, bool) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; llvm::NLE_internal::DFSStackNode<NLET>::EdgeT = llvm::NLE_internal::Edge<llvm::BasicBlock>; llvm::NLE_internal::DFSStackNode<NLET>::TimeStepT = long unsigned int]’
NodeLoopEquivalence.hpp:204:17:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:82:44: error: ‘using NodeT = using NodeT = class llvm::NLE_internal::Node<llvm::BasicBlock> {aka class llvm::NLE_internal::Node<llvm::BasicBlock>}’ has no member named ‘getPointer’
   const BlockT* getBB() { return getNode().getPointer(); }
                                  ~~~~~~~~~~^~~~~~~~~~
In file included from NodeEdge.hpp:5:0,
                 from Bracket.hpp:5,
                 from NodeLoopEquivalence.hpp:4,
                 from NodeLoopEquivalence_test.cpp:1:
/usr/include/llvm/ADT/PointerIntPair.h: In instantiation of ‘struct llvm::PointerIntPairInfo<llvm::NLE_internal::Node<llvm::BasicBlock>, 1, llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> > >’:
/usr/include/llvm/ADT/PointerIntPair.h:56:57:   required from ‘PointerTy llvm::PointerIntPair<PointerTy, IntBits, IntType, PtrTraits, Info>::getPointer() const [with PointerTy = llvm::NLE_internal::Node<llvm::BasicBlock>; unsigned int IntBits = 1; IntType = llvm::NLE_internal::EdgeKind; PtrTraits = llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >; Info = llvm::PointerIntPairInfo<llvm::NLE_internal::Node<llvm::BasicBlock>, 1, llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> > >]’
NodeEdge.hpp:46:50:   required from ‘llvm::NLE_internal::Edge<BlockT>::NodeT llvm::NLE_internal::Edge<BlockT>::getChildNode() [with BlockT = llvm::BasicBlock; llvm::NLE_internal::Edge<BlockT>::NodeT = llvm::NLE_internal::Node<llvm::BasicBlock>]’
NodeLoopEquivalence.hpp:208:62:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
/usr/include/llvm/ADT/PointerIntPair.h:126:48: error: ‘NumLowBitsAvailable’ is not a member of ‘llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >’
   static_assert(PtrTraits::NumLowBitsAvailable <
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
                     std::numeric_limits<uintptr_t>::digits,
                     ~~~                         
/usr/include/llvm/ADT/PointerIntPair.h:129:25: error: ‘NumLowBitsAvailable’ is not a member of ‘llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >’
   static_assert(IntBits <= PtrTraits::NumLowBitsAvailable,
                 ~~~~~~~~^~~~~~~~~~~~
/usr/include/llvm/ADT/PointerIntPair.h:134:35: error: ‘NumLowBitsAvailable’ is not a member of ‘llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >’
         ~(uintptr_t)(((intptr_t)1 << PtrTraits::NumLowBitsAvailable) - 1),
                      ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/llvm/ADT/PointerIntPair.h:138:16: error: ‘NumLowBitsAvailable’ is not a member of ‘llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >’
     IntShift = (uintptr_t)PtrTraits::NumLowBitsAvailable - IntBits,
                ^~~~~~~~~~~~~~~~~~~~
In file included from NodeLoopEquivalence_test.cpp:1:0:
NodeLoopEquivalence.hpp: In instantiation of ‘llvm::NLE_internal::DFSStackNode<NLET>::EdgeT llvm::NLE_internal::DFSStackNode<NLET>::getPalEdge() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; llvm::NLE_internal::DFSStackNode<NLET>::EdgeT = llvm::NLE_internal::Edge<llvm::BasicBlock>]’:
NodeLoopEquivalence.hpp:175:19:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisitStackTop() [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)1; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:209:35:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:86:41: error: ‘using NodeT = using NodeT = class llvm::NLE_internal::Node<llvm::BasicBlock> {aka class llvm::NLE_internal::Node<llvm::BasicBlock>}’ has no member named ‘getPalEdge’; did you mean ‘getPal’?
   EdgeT getPalEdge() { return getNode().getPalEdge(); }
                               ~~~~~~~~~~^~~~~~~~~~
                               getPal
NodeLoopEquivalence.hpp: In instantiation of ‘static std::enable_if_t<(NK == NK_Entry), typename std::conditional<(NK == NK_Entry), typename NLET::PredItorT, typename NLET::SuccItorT>::type> llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::end_pos(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSStackNodeT&) [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)1; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; std::enable_if_t<(NK == NK_Entry), typename std::conditional<(NK == NK_Entry), typename NLET::PredItorT, typename NLET::SuccItorT>::type> = llvm::PredIterator<const llvm::BasicBlock, llvm::Value::user_iterator_impl<const llvm::User> >; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSStackNodeT = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >]’:
NodeLoopEquivalence.hpp:179:67:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisitStackTop() [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)1; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:209:35:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:145:32: error: ‘using DFSStackNodeT = class llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> > {aka class llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >}’ has no member named ‘getPointer’; did you mean ‘getNode’?
     return pred_end(stack_node.getPointer());
                     ~~~~~~~~~~~^~~~~~~~~~
                     getNode
NodeLoopEquivalence.hpp: In instantiation of ‘static llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::EdgeT llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::getEdge(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::ItorT<NK>) [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)1; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::EdgeT = llvm::NLE_internal::Edge<llvm::BasicBlock>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::ItorT<NK> = llvm::PredIterator<const llvm::BasicBlock, llvm::Value::user_iterator_impl<const llvm::User> >]’:
NodeLoopEquivalence.hpp:180:31:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisitStackTop() [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)1; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:209:35:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:156:50: error: lvalue required as unary ‘&’ operand
   static EdgeT getEdge(ItorT<NK> itor) { return {&*itor, false}; }
                                                  ^~~~~~
NodeLoopEquivalence.hpp:156:63: error: could not convert ‘{<expression error>, false}’ from ‘<brace-enclosed initializer list>’ to ‘llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::EdgeT {aka llvm::NLE_internal::Edge<llvm::BasicBlock>}’
   static EdgeT getEdge(ItorT<NK> itor) { return {&*itor, false}; }
                                                               ^
NodeLoopEquivalence.hpp: In instantiation of ‘static std::enable_if_t<(NK == NK_Exit), typename std::conditional<(NK == NK_Entry), typename NLET::PredItorT, typename NLET::SuccItorT>::type> llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::end_pos(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSStackNodeT&) [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)0; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; std::enable_if_t<(NK == NK_Exit), typename std::conditional<(NK == NK_Entry), typename NLET::PredItorT, typename NLET::SuccItorT>::type> = llvm::TerminatorInst::SuccIterator<const llvm::TerminatorInst*, const llvm::BasicBlock>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::DFSStackNodeT = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >]’:
NodeLoopEquivalence.hpp:179:67:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisitStackTop() [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)0; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:211:34:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:153:32: error: ‘using DFSStackNodeT = class llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> > {aka class llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >}’ has no member named ‘getPointer’; did you mean ‘getNode’?
     return succ_end(stack_node.getPointer());
                     ~~~~~~~~~~~^~~~~~~~~~
                     getNode
NodeLoopEquivalence.hpp: In instantiation of ‘static llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::EdgeT llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::getEdge(llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::ItorT<NK>) [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)0; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::EdgeT = llvm::NLE_internal::Edge<llvm::BasicBlock>; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::ItorT<NK> = llvm::TerminatorInst::SuccIterator<const llvm::TerminatorInst*, const llvm::BasicBlock>]’:
NodeLoopEquivalence.hpp:180:31:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisitStackTop() [with llvm::NLE_internal::NodeKind NK = (llvm::NLE_internal::NodeKind)0; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:211:34:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
NodeLoopEquivalence.hpp:156:50: error: lvalue required as unary ‘&’ operand
   static EdgeT getEdge(ItorT<NK> itor) { return {&*itor, false}; }
                                                  ^~~~~~
NodeLoopEquivalence.hpp:156:63: error: could not convert ‘{<expression error>, false}’ from ‘<brace-enclosed initializer list>’ to ‘llvm::NLE_internal::NodeLoopEquivalence<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::EdgeT {aka llvm::NLE_internal::Edge<llvm::BasicBlock>}’
   static EdgeT getEdge(ItorT<NK> itor) { return {&*itor, false}; }
                                                               ^
In file included from NodeLoopEquivalence.hpp:4:0,
                 from NodeLoopEquivalence_test.cpp:1:
Bracket.hpp: In instantiation of ‘void llvm::NLE_internal::BracketList<NLET, AllocatorT>::drop(Container&) [with Container = std::forward_list<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> >*, std::allocator<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> >*> >; NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’:
NodeLoopEquivalence.hpp:57:5:   required from ‘void llvm::NLE_internal::DFSNode<NLET, AllocatorT>::deleteBrackets() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:263:7:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::punchMarkers() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:282:17:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
Bracket.hpp:81:12: error: object type ‘llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> >’ does not match destructor name ~‘BracketListNodeT’
       dh->~BracketListNodeT();
       ~~~~~^~~~~~~~~~~~~~~~
Bracket.hpp:82:17: error: ‘class llvm::MallocAllocator’ has no member named ‘deallocate’; did you mean ‘Deallocate’?
       Allocator.deallocate(dh, sizeof(BracketT));
       ~~~~~~~~~~^~~~~~~~~~
       Deallocate
In file included from NodeEdge.hpp:5:0,
                 from Bracket.hpp:5,
                 from NodeLoopEquivalence.hpp:4,
                 from NodeLoopEquivalence_test.cpp:1:
/usr/include/llvm/ADT/PointerIntPair.h: In instantiation of ‘static intptr_t llvm::PointerIntPairInfo<PointerT, IntBits, PtrTraits>::updatePointer(intptr_t, PointerT) [with PointerT = llvm::NLE_internal::Node<llvm::BasicBlock>; unsigned int IntBits = 1; PtrTraits = llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >; intptr_t = long int]’:
/usr/include/llvm/ADT/PointerIntPair.h:75:48:   required from ‘void llvm::PointerIntPair<PointerTy, IntBits, IntType, PtrTraits, Info>::setPointerAndInt(PointerTy, IntType) [with PointerTy = llvm::NLE_internal::Node<llvm::BasicBlock>; unsigned int IntBits = 1; IntType = llvm::NLE_internal::EdgeKind; PtrTraits = llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >; Info = llvm::PointerIntPairInfo<llvm::NLE_internal::Node<llvm::BasicBlock>, 1, llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> > >]’
/usr/include/llvm/ADT/PointerIntPair.h:52:21:   required from ‘llvm::PointerIntPair<PointerTy, IntBits, IntType, PtrTraits, Info>::PointerIntPair(PointerTy, IntType) [with PointerTy = llvm::NLE_internal::Node<llvm::BasicBlock>; unsigned int IntBits = 1; IntType = llvm::NLE_internal::EdgeKind; PtrTraits = llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >; Info = llvm::PointerIntPairInfo<llvm::NLE_internal::Node<llvm::BasicBlock>, 1, llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> > >]’
NodeEdge.hpp:44:53:   required from ‘llvm::NLE_internal::Edge<BlockT>::Edge(llvm::NLE_internal::Edge<BlockT>::NodeT, llvm::NLE_internal::EdgeKind) [with BlockT = llvm::BasicBlock; llvm::NLE_internal::Edge<BlockT>::NodeT = llvm::NLE_internal::Node<llvm::BasicBlock>]’
NodeLoopEquivalence.hpp:204:17:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
/usr/include/llvm/ADT/PointerIntPair.h:158:63: error: ‘getAsVoidPointer’ is not a member of ‘llvm::PointerLikeTypeTraits<llvm::NLE_internal::Node<llvm::BasicBlock> >’
         reinterpret_cast<intptr_t>(PtrTraits::getAsVoidPointer(Ptr));
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
In file included from /usr/include/c++/7.2.1/bits/stl_tempbuf.h:60:0,
                 from /usr/include/c++/7.2.1/bits/stl_algo.h:62,
                 from /usr/include/c++/7.2.1/algorithm:62,
                 from /usr/include/llvm/ADT/STLExtras.h:20,
                 from /usr/include/llvm/ADT/StringRef.h:13,
                 from /usr/include/llvm/ADT/StringMap.h:17,
                 from /usr/include/llvm/Support/Host.h:17,
                 from /usr/include/llvm/ADT/Hashing.h:49,
                 from /usr/include/llvm/ADT/ArrayRef.h:13,
                 from /usr/include/llvm/ADT/DenseMapInfo.h:17,
                 from NodeEdge.hpp:4,
                 from Bracket.hpp:5,
                 from NodeLoopEquivalence.hpp:4,
                 from NodeLoopEquivalence_test.cpp:1:
/usr/include/c++/7.2.1/bits/stl_construct.h: In instantiation of ‘void std::_Construct(_T1*, _Args&& ...) [with _T1 = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; _Args = {llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>}]’:
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:83:18:   required from ‘static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*>; _ForwardIterator = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*; bool _TrivialValueTypes = false]’
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:134:15:   required from ‘_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*>; _ForwardIterator = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*]’
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:289:37:   required from ‘_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*>; _ForwardIterator = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*; _Tp = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>]’
/usr/include/c++/7.2.1/bits/stl_vector.h:1263:35:   required from ‘std::vector<_Tp, _Alloc>::pointer std::vector<_Tp, _Alloc>::_M_allocate_and_copy(std::vector<_Tp, _Alloc>::size_type, _ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::move_iterator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*>; _Tp = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; _Alloc = std::allocator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator> >; std::vector<_Tp, _Alloc>::pointer = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int]’
/usr/include/c++/7.2.1/bits/vector.tcc:73:40:   required from ‘void std::vector<_Tp, _Alloc>::reserve(std::vector<_Tp, _Alloc>::size_type) [with _Tp = llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>; _Alloc = std::allocator<llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator> >; std::vector<_Tp, _Alloc>::size_type = long unsigned int]’
NodeLoopEquivalence.hpp:197:5:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
/usr/include/c++/7.2.1/bits/stl_construct.h:75:7: error: use of deleted function ‘llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::DFSNode(llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>&&)’
     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from NodeLoopEquivalence_test.cpp:1:0:
NodeLoopEquivalence.hpp:22:7: note: ‘llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::DFSNode(llvm::NLE_internal::DFSNode<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>&&)’ is implicitly deleted because the default definition would be ill-formed:
 class DFSNode {
       ^~~~~~~
NodeLoopEquivalence.hpp:22:7: error: use of deleted function ‘llvm::NLE_internal::BracketList<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::BracketList(llvm::NLE_internal::BracketList<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>&&)’
In file included from NodeLoopEquivalence.hpp:4:0,
                 from NodeLoopEquivalence_test.cpp:1:
Bracket.hpp:32:7: note: ‘llvm::NLE_internal::BracketList<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>::BracketList(llvm::NLE_internal::BracketList<llvm::NodeLoopEquivalenceTraits<llvm::Function>, llvm::MallocAllocator>&&)’ is implicitly deleted because the default definition would be ill-formed:
 class BracketList {
       ^~~~~~~~~~~
Bracket.hpp:32:7: error: use of deleted function ‘llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >::idlist(llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >&&)’
In file included from Bracket.hpp:4:0,
                 from NodeLoopEquivalence.hpp:4,
                 from NodeLoopEquivalence_test.cpp:1:
idlist.hpp:58:7: note: ‘llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >::idlist(llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >&&)’ is implicitly deleted because the default definition would be ill-formed:
 class idlist : public idlist_impl {
       ^~~~~~
idlist.hpp:58:7: error: cannot bind non-const lvalue reference of type ‘llvm::NLE_internal::idlist_impl&’ to an rvalue of type ‘llvm::NLE_internal::idlist_impl’
idlist.hpp:15:3: note:   initializing argument 1 of ‘llvm::NLE_internal::idlist_impl::idlist_impl(llvm::NLE_internal::idlist_impl&)’
   idlist_impl(idlist_impl & p) {
   ^~~~~~~~~~~
In file included from NodeLoopEquivalence.hpp:4:0,
                 from NodeLoopEquivalence_test.cpp:1:
Bracket.hpp:32:7: error: use of deleted function ‘llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >::idlist(llvm::NLE_internal::idlist<llvm::NLE_internal::Bracket<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >&&)’
 class BracketList {
       ^~~~~~~~~~~
In file included from /usr/include/c++/7.2.1/bits/stl_tempbuf.h:60:0,
                 from /usr/include/c++/7.2.1/bits/stl_algo.h:62,
                 from /usr/include/c++/7.2.1/algorithm:62,
                 from /usr/include/llvm/ADT/STLExtras.h:20,
                 from /usr/include/llvm/ADT/StringRef.h:13,
                 from /usr/include/llvm/ADT/StringMap.h:17,
                 from /usr/include/llvm/Support/Host.h:17,
                 from /usr/include/llvm/ADT/Hashing.h:49,
                 from /usr/include/llvm/ADT/ArrayRef.h:13,
                 from /usr/include/llvm/ADT/DenseMapInfo.h:17,
                 from NodeEdge.hpp:4,
                 from Bracket.hpp:5,
                 from NodeLoopEquivalence.hpp:4,
                 from NodeLoopEquivalence_test.cpp:1:
/usr/include/c++/7.2.1/bits/stl_construct.h: In instantiation of ‘void std::_Construct(_T1*, _Args&& ...) [with _T1 = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >; _Args = {}]’:
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:527:18:   required from ‘static _ForwardIterator std::__uninitialized_default_n_1<_TrivialValueType>::__uninit_default_n(_ForwardIterator, _Size) [with _ForwardIterator = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >*; _Size = long unsigned int; bool _TrivialValueType = false]’
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:583:20:   required from ‘_ForwardIterator std::__uninitialized_default_n(_ForwardIterator, _Size) [with _ForwardIterator = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >*; _Size = long unsigned int]’
/usr/include/c++/7.2.1/bits/stl_uninitialized.h:645:44:   required from ‘_ForwardIterator std::__uninitialized_default_n_a(_ForwardIterator, _Size, std::allocator<_Tp>&) [with _ForwardIterator = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >*; _Size = long unsigned int; _Tp = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >]’
/usr/include/c++/7.2.1/bits/vector.tcc:563:35:   required from ‘void std::vector<_Tp, _Alloc>::_M_default_append(std::vector<_Tp, _Alloc>::size_type) [with _Tp = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >; _Alloc = std::allocator<llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >; std::vector<_Tp, _Alloc>::size_type = long unsigned int]’
/usr/include/c++/7.2.1/bits/stl_vector.h:692:21:   required from ‘void std::vector<_Tp, _Alloc>::resize(std::vector<_Tp, _Alloc>::size_type) [with _Tp = llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >; _Alloc = std::allocator<llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> > >; std::vector<_Tp, _Alloc>::size_type = long unsigned int]’
NodeLoopEquivalence.hpp:200:5:   required from ‘void llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::dfsVisit() [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator]’
NodeLoopEquivalence.hpp:281:13:   required from ‘llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::NodeLoopEquivalence(const FuncT&) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; AllocatorT = llvm::MallocAllocator; llvm::NLE_internal::NodeLoopEquivalence<NLET, AllocatorT>::FuncT = llvm::Function]’
NodeLoopEquivalence_test.cpp:9:112:   required from here
/usr/include/c++/7.2.1/bits/stl_construct.h:75:7: error: no matching function for call to ‘llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::DFSStackNode()’
     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from NodeLoopEquivalence_test.cpp:1:0:
NodeLoopEquivalence.hpp:73:3: note: candidate: llvm::NLE_internal::DFSStackNode<NLET>::DFSStackNode(llvm::NLE_internal::DFSStackNode<NLET>::EdgeT, llvm::NLE_internal::DFSStackNode<NLET>::TimeStepT&, bool) [with NLET = llvm::NodeLoopEquivalenceTraits<llvm::Function>; llvm::NLE_internal::DFSStackNode<NLET>::EdgeT = llvm::NLE_internal::Edge<llvm::BasicBlock>; llvm::NLE_internal::DFSStackNode<NLET>::TimeStepT = long unsigned int]
   DFSStackNode(EdgeT Edge_, TimeStepT & DFSNumber_, bool PalVisited = false) : Edge(Edge_), DFSNumber(&DFSNumber_, PalVisited) {
   ^~~~~~~~~~~~
NodeLoopEquivalence.hpp:73:3: note:   candidate expects 3 arguments, 0 provided
NodeLoopEquivalence.hpp:64:7: note: candidate: constexpr llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::DFSStackNode(const llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >&)
 class DFSStackNode {
       ^~~~~~~~~~~~
NodeLoopEquivalence.hpp:64:7: note:   candidate expects 1 argument, 0 provided
NodeLoopEquivalence.hpp:64:7: note: candidate: constexpr llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >::DFSStackNode(llvm::NLE_internal::DFSStackNode<llvm::NodeLoopEquivalenceTraits<llvm::Function> >&&)
NodeLoopEquivalence.hpp:64:7: note:   candidate expects 1 argument, 0 provided
